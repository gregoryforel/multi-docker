# Tell Ngninx that there is an 'upstream server at client:3000. Note that 3000 is react app's standard port.
upstream client {
    server                    client:3000;
}

# Tell Nginx that there is an 'upstream' server  at serevr:5000. Note that 5000 was defined in server/index.js
upstream api {
    #                         note that here, it should have been server server. But this would fail, so let's call it api
    server                    api:5000;
}

server {
    #                         Listen on port 80
    listen                    80;

    #                         If anyone comes to '/, send them to client upstream
    location / {
        proxy_pass            http://client;
    }

    #                         This is development specific
    #                         If we wanted to do things perfectly, we would create another default.conf file for production
    #                         without this socket part, and use Dockerfile to point to it.
    location /sockjs-node {
        proxy_pass            http://client;
        proxy_http_version    1.1;
        proxy_set_header      Upgrade $http_upgrade;
        proxy_set_header      Connection "Upgrade";
    }

    #                         If anyone comes to '/api, send them to server upstream
    location /api {
        #                     Note that in our server (express), we are not expecting /api/... routes.
        #                     So a '/api/values/all' route should be converted to '/values/all'
        #                     We use a regex. /api/<whatever> is converted to /<whatever>
        #                     $1 replaces anything found inside (.*)
        #                     break is a directive that tells Nginx not to try to make any extra re-write after this one.
        rewrite               /api/(.*) /$1 break;
        proxy_pass            http://api;
    }
}